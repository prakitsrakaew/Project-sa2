// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/prakitsrakaew/app/ent/bill"
	"github.com/prakitsrakaew/app/ent/repairinvoice"
)

// Repairinvoice is the model entity for the Repairinvoice schema.
type Repairinvoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Symptomid holds the value of the "symptomid" field.
	Symptomid int `json:"symptomid,omitempty"`
	// Deviceid holds the value of the "deviceid" field.
	Deviceid int `json:"deviceid,omitempty"`
	// Userid holds the value of the "userid" field.
	Userid int `json:"userid,omitempty"`
	// Statusrepairid holds the value of the "statusrepairid" field.
	Statusrepairid int `json:"statusrepairid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepairinvoiceQuery when eager-loading is set.
	Edges RepairinvoiceEdges `json:"edges"`
}

// RepairinvoiceEdges holds the relations/edges for other nodes in the graph.
type RepairinvoiceEdges struct {
	// Repairinvoices holds the value of the repairinvoices edge.
	Repairinvoices *Bill
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RepairinvoicesOrErr returns the Repairinvoices value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepairinvoiceEdges) RepairinvoicesOrErr() (*Bill, error) {
	if e.loadedTypes[0] {
		if e.Repairinvoices == nil {
			// The edge repairinvoices was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: bill.Label}
		}
		return e.Repairinvoices, nil
	}
	return nil, &NotLoadedError{edge: "repairinvoices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Repairinvoice) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // symptomid
		&sql.NullInt64{}, // deviceid
		&sql.NullInt64{}, // userid
		&sql.NullInt64{}, // statusrepairid
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Repairinvoice fields.
func (r *Repairinvoice) assignValues(values ...interface{}) error {
	if m, n := len(values), len(repairinvoice.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field symptomid", values[0])
	} else if value.Valid {
		r.Symptomid = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field deviceid", values[1])
	} else if value.Valid {
		r.Deviceid = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field userid", values[2])
	} else if value.Valid {
		r.Userid = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field statusrepairid", values[3])
	} else if value.Valid {
		r.Statusrepairid = int(value.Int64)
	}
	return nil
}

// QueryRepairinvoices queries the repairinvoices edge of the Repairinvoice.
func (r *Repairinvoice) QueryRepairinvoices() *BillQuery {
	return (&RepairinvoiceClient{config: r.config}).QueryRepairinvoices(r)
}

// Update returns a builder for updating this Repairinvoice.
// Note that, you need to call Repairinvoice.Unwrap() before calling this method, if this Repairinvoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Repairinvoice) Update() *RepairinvoiceUpdateOne {
	return (&RepairinvoiceClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Repairinvoice) Unwrap() *Repairinvoice {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Repairinvoice is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Repairinvoice) String() string {
	var builder strings.Builder
	builder.WriteString("Repairinvoice(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", symptomid=")
	builder.WriteString(fmt.Sprintf("%v", r.Symptomid))
	builder.WriteString(", deviceid=")
	builder.WriteString(fmt.Sprintf("%v", r.Deviceid))
	builder.WriteString(", userid=")
	builder.WriteString(fmt.Sprintf("%v", r.Userid))
	builder.WriteString(", statusrepairid=")
	builder.WriteString(fmt.Sprintf("%v", r.Statusrepairid))
	builder.WriteByte(')')
	return builder.String()
}

// Repairinvoices is a parsable slice of Repairinvoice.
type Repairinvoices []*Repairinvoice

func (r Repairinvoices) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
