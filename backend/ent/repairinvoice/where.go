// Code generated by entc, DO NOT EDIT.

package repairinvoice

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/prakitsrakaew/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Symptomid applies equality check predicate on the "symptomid" field. It's identical to SymptomidEQ.
func Symptomid(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptomid), v))
	})
}

// Deviceid applies equality check predicate on the "deviceid" field. It's identical to DeviceidEQ.
func Deviceid(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceid), v))
	})
}

// Userid applies equality check predicate on the "userid" field. It's identical to UseridEQ.
func Userid(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserid), v))
	})
}

// Statusrepairid applies equality check predicate on the "statusrepairid" field. It's identical to StatusrepairidEQ.
func Statusrepairid(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusrepairid), v))
	})
}

// SymptomidEQ applies the EQ predicate on the "symptomid" field.
func SymptomidEQ(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptomid), v))
	})
}

// SymptomidNEQ applies the NEQ predicate on the "symptomid" field.
func SymptomidNEQ(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymptomid), v))
	})
}

// SymptomidIn applies the In predicate on the "symptomid" field.
func SymptomidIn(vs ...int) predicate.Repairinvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repairinvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSymptomid), v...))
	})
}

// SymptomidNotIn applies the NotIn predicate on the "symptomid" field.
func SymptomidNotIn(vs ...int) predicate.Repairinvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repairinvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSymptomid), v...))
	})
}

// SymptomidGT applies the GT predicate on the "symptomid" field.
func SymptomidGT(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymptomid), v))
	})
}

// SymptomidGTE applies the GTE predicate on the "symptomid" field.
func SymptomidGTE(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymptomid), v))
	})
}

// SymptomidLT applies the LT predicate on the "symptomid" field.
func SymptomidLT(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymptomid), v))
	})
}

// SymptomidLTE applies the LTE predicate on the "symptomid" field.
func SymptomidLTE(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymptomid), v))
	})
}

// DeviceidEQ applies the EQ predicate on the "deviceid" field.
func DeviceidEQ(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceid), v))
	})
}

// DeviceidNEQ applies the NEQ predicate on the "deviceid" field.
func DeviceidNEQ(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceid), v))
	})
}

// DeviceidIn applies the In predicate on the "deviceid" field.
func DeviceidIn(vs ...int) predicate.Repairinvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repairinvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceid), v...))
	})
}

// DeviceidNotIn applies the NotIn predicate on the "deviceid" field.
func DeviceidNotIn(vs ...int) predicate.Repairinvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repairinvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceid), v...))
	})
}

// DeviceidGT applies the GT predicate on the "deviceid" field.
func DeviceidGT(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceid), v))
	})
}

// DeviceidGTE applies the GTE predicate on the "deviceid" field.
func DeviceidGTE(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceid), v))
	})
}

// DeviceidLT applies the LT predicate on the "deviceid" field.
func DeviceidLT(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceid), v))
	})
}

// DeviceidLTE applies the LTE predicate on the "deviceid" field.
func DeviceidLTE(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceid), v))
	})
}

// UseridEQ applies the EQ predicate on the "userid" field.
func UseridEQ(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserid), v))
	})
}

// UseridNEQ applies the NEQ predicate on the "userid" field.
func UseridNEQ(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserid), v))
	})
}

// UseridIn applies the In predicate on the "userid" field.
func UseridIn(vs ...int) predicate.Repairinvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repairinvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserid), v...))
	})
}

// UseridNotIn applies the NotIn predicate on the "userid" field.
func UseridNotIn(vs ...int) predicate.Repairinvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repairinvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserid), v...))
	})
}

// UseridGT applies the GT predicate on the "userid" field.
func UseridGT(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserid), v))
	})
}

// UseridGTE applies the GTE predicate on the "userid" field.
func UseridGTE(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserid), v))
	})
}

// UseridLT applies the LT predicate on the "userid" field.
func UseridLT(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserid), v))
	})
}

// UseridLTE applies the LTE predicate on the "userid" field.
func UseridLTE(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserid), v))
	})
}

// StatusrepairidEQ applies the EQ predicate on the "statusrepairid" field.
func StatusrepairidEQ(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusrepairid), v))
	})
}

// StatusrepairidNEQ applies the NEQ predicate on the "statusrepairid" field.
func StatusrepairidNEQ(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusrepairid), v))
	})
}

// StatusrepairidIn applies the In predicate on the "statusrepairid" field.
func StatusrepairidIn(vs ...int) predicate.Repairinvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repairinvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusrepairid), v...))
	})
}

// StatusrepairidNotIn applies the NotIn predicate on the "statusrepairid" field.
func StatusrepairidNotIn(vs ...int) predicate.Repairinvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Repairinvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusrepairid), v...))
	})
}

// StatusrepairidGT applies the GT predicate on the "statusrepairid" field.
func StatusrepairidGT(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusrepairid), v))
	})
}

// StatusrepairidGTE applies the GTE predicate on the "statusrepairid" field.
func StatusrepairidGTE(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusrepairid), v))
	})
}

// StatusrepairidLT applies the LT predicate on the "statusrepairid" field.
func StatusrepairidLT(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusrepairid), v))
	})
}

// StatusrepairidLTE applies the LTE predicate on the "statusrepairid" field.
func StatusrepairidLTE(v int) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusrepairid), v))
	})
}

// HasRepairinvoices applies the HasEdge predicate on the "repairinvoices" edge.
func HasRepairinvoices() predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RepairinvoicesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RepairinvoicesTable, RepairinvoicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepairinvoicesWith applies the HasEdge predicate on the "repairinvoices" edge with a given conditions (other predicates).
func HasRepairinvoicesWith(preds ...predicate.Bill) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RepairinvoicesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RepairinvoicesTable, RepairinvoicesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Repairinvoice) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Repairinvoice) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Repairinvoice) predicate.Repairinvoice {
	return predicate.Repairinvoice(func(s *sql.Selector) {
		p(s.Not())
	})
}
