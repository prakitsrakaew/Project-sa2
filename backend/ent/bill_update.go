// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/prakitsrakaew/app/ent/bill"
	"github.com/prakitsrakaew/app/ent/billingstatus"
	"github.com/prakitsrakaew/app/ent/employee"
	"github.com/prakitsrakaew/app/ent/predicate"
	"github.com/prakitsrakaew/app/ent/repairinvoice"
)

// BillUpdate is the builder for updating Bill entities.
type BillUpdate struct {
	config
	hooks      []Hook
	mutation   *BillMutation
	predicates []predicate.Bill
}

// Where adds a new predicate for the builder.
func (bu *BillUpdate) Where(ps ...predicate.Bill) *BillUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetPrice sets the price field.
func (bu *BillUpdate) SetPrice(i int) *BillUpdate {
	bu.mutation.ResetPrice()
	bu.mutation.SetPrice(i)
	return bu
}

// AddPrice adds i to price.
func (bu *BillUpdate) AddPrice(i int) *BillUpdate {
	bu.mutation.AddPrice(i)
	return bu
}

// SetTime sets the time field.
func (bu *BillUpdate) SetTime(i int) *BillUpdate {
	bu.mutation.ResetTime()
	bu.mutation.SetTime(i)
	return bu
}

// AddTime adds i to time.
func (bu *BillUpdate) AddTime(i int) *BillUpdate {
	bu.mutation.AddTime(i)
	return bu
}

// SetRepairinvoiceID sets the Repairinvoice edge to Repairinvoice by id.
func (bu *BillUpdate) SetRepairinvoiceID(id int) *BillUpdate {
	bu.mutation.SetRepairinvoiceID(id)
	return bu
}

// SetRepairinvoice sets the Repairinvoice edge to Repairinvoice.
func (bu *BillUpdate) SetRepairinvoice(r *Repairinvoice) *BillUpdate {
	return bu.SetRepairinvoiceID(r.ID)
}

// SetEmployeeID sets the Employee edge to Employee by id.
func (bu *BillUpdate) SetEmployeeID(id int) *BillUpdate {
	bu.mutation.SetEmployeeID(id)
	return bu
}

// SetNillableEmployeeID sets the Employee edge to Employee by id if the given value is not nil.
func (bu *BillUpdate) SetNillableEmployeeID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetEmployeeID(*id)
	}
	return bu
}

// SetEmployee sets the Employee edge to Employee.
func (bu *BillUpdate) SetEmployee(e *Employee) *BillUpdate {
	return bu.SetEmployeeID(e.ID)
}

// SetBillingstatusID sets the Billingstatus edge to Billingstatus by id.
func (bu *BillUpdate) SetBillingstatusID(id int) *BillUpdate {
	bu.mutation.SetBillingstatusID(id)
	return bu
}

// SetNillableBillingstatusID sets the Billingstatus edge to Billingstatus by id if the given value is not nil.
func (bu *BillUpdate) SetNillableBillingstatusID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetBillingstatusID(*id)
	}
	return bu
}

// SetBillingstatus sets the Billingstatus edge to Billingstatus.
func (bu *BillUpdate) SetBillingstatus(b *Billingstatus) *BillUpdate {
	return bu.SetBillingstatusID(b.ID)
}

// Mutation returns the BillMutation object of the builder.
func (bu *BillUpdate) Mutation() *BillMutation {
	return bu.mutation
}

// ClearRepairinvoice clears the Repairinvoice edge to Repairinvoice.
func (bu *BillUpdate) ClearRepairinvoice() *BillUpdate {
	bu.mutation.ClearRepairinvoice()
	return bu
}

// ClearEmployee clears the Employee edge to Employee.
func (bu *BillUpdate) ClearEmployee() *BillUpdate {
	bu.mutation.ClearEmployee()
	return bu
}

// ClearBillingstatus clears the Billingstatus edge to Billingstatus.
func (bu *BillUpdate) ClearBillingstatus() *BillUpdate {
	bu.mutation.ClearBillingstatus()
	return bu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BillUpdate) Save(ctx context.Context) (int, error) {

	if _, ok := bu.mutation.RepairinvoiceID(); bu.mutation.RepairinvoiceCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"Repairinvoice\"")
	}

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bill.Table,
			Columns: bill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bill.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldPrice,
		})
	}
	if value, ok := bu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldPrice,
		})
	}
	if value, ok := bu.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldTime,
		})
	}
	if value, ok := bu.mutation.AddedTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldTime,
		})
	}
	if bu.mutation.RepairinvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bill.RepairinvoiceTable,
			Columns: []string{bill.RepairinvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RepairinvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bill.RepairinvoiceTable,
			Columns: []string{bill.RepairinvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.EmployeeTable,
			Columns: []string{bill.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.EmployeeTable,
			Columns: []string{bill.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BillingstatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillingstatusTable,
			Columns: []string{bill.BillingstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billingstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BillingstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillingstatusTable,
			Columns: []string{bill.BillingstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billingstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BillUpdateOne is the builder for updating a single Bill entity.
type BillUpdateOne struct {
	config
	hooks    []Hook
	mutation *BillMutation
}

// SetPrice sets the price field.
func (buo *BillUpdateOne) SetPrice(i int) *BillUpdateOne {
	buo.mutation.ResetPrice()
	buo.mutation.SetPrice(i)
	return buo
}

// AddPrice adds i to price.
func (buo *BillUpdateOne) AddPrice(i int) *BillUpdateOne {
	buo.mutation.AddPrice(i)
	return buo
}

// SetTime sets the time field.
func (buo *BillUpdateOne) SetTime(i int) *BillUpdateOne {
	buo.mutation.ResetTime()
	buo.mutation.SetTime(i)
	return buo
}

// AddTime adds i to time.
func (buo *BillUpdateOne) AddTime(i int) *BillUpdateOne {
	buo.mutation.AddTime(i)
	return buo
}

// SetRepairinvoiceID sets the Repairinvoice edge to Repairinvoice by id.
func (buo *BillUpdateOne) SetRepairinvoiceID(id int) *BillUpdateOne {
	buo.mutation.SetRepairinvoiceID(id)
	return buo
}

// SetRepairinvoice sets the Repairinvoice edge to Repairinvoice.
func (buo *BillUpdateOne) SetRepairinvoice(r *Repairinvoice) *BillUpdateOne {
	return buo.SetRepairinvoiceID(r.ID)
}

// SetEmployeeID sets the Employee edge to Employee by id.
func (buo *BillUpdateOne) SetEmployeeID(id int) *BillUpdateOne {
	buo.mutation.SetEmployeeID(id)
	return buo
}

// SetNillableEmployeeID sets the Employee edge to Employee by id if the given value is not nil.
func (buo *BillUpdateOne) SetNillableEmployeeID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetEmployeeID(*id)
	}
	return buo
}

// SetEmployee sets the Employee edge to Employee.
func (buo *BillUpdateOne) SetEmployee(e *Employee) *BillUpdateOne {
	return buo.SetEmployeeID(e.ID)
}

// SetBillingstatusID sets the Billingstatus edge to Billingstatus by id.
func (buo *BillUpdateOne) SetBillingstatusID(id int) *BillUpdateOne {
	buo.mutation.SetBillingstatusID(id)
	return buo
}

// SetNillableBillingstatusID sets the Billingstatus edge to Billingstatus by id if the given value is not nil.
func (buo *BillUpdateOne) SetNillableBillingstatusID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetBillingstatusID(*id)
	}
	return buo
}

// SetBillingstatus sets the Billingstatus edge to Billingstatus.
func (buo *BillUpdateOne) SetBillingstatus(b *Billingstatus) *BillUpdateOne {
	return buo.SetBillingstatusID(b.ID)
}

// Mutation returns the BillMutation object of the builder.
func (buo *BillUpdateOne) Mutation() *BillMutation {
	return buo.mutation
}

// ClearRepairinvoice clears the Repairinvoice edge to Repairinvoice.
func (buo *BillUpdateOne) ClearRepairinvoice() *BillUpdateOne {
	buo.mutation.ClearRepairinvoice()
	return buo
}

// ClearEmployee clears the Employee edge to Employee.
func (buo *BillUpdateOne) ClearEmployee() *BillUpdateOne {
	buo.mutation.ClearEmployee()
	return buo
}

// ClearBillingstatus clears the Billingstatus edge to Billingstatus.
func (buo *BillUpdateOne) ClearBillingstatus() *BillUpdateOne {
	buo.mutation.ClearBillingstatus()
	return buo
}

// Save executes the query and returns the updated entity.
func (buo *BillUpdateOne) Save(ctx context.Context) (*Bill, error) {

	if _, ok := buo.mutation.RepairinvoiceID(); buo.mutation.RepairinvoiceCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"Repairinvoice\"")
	}

	var (
		err  error
		node *Bill
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillUpdateOne) SaveX(ctx context.Context) *Bill {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BillUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BillUpdateOne) sqlSave(ctx context.Context) (b *Bill, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bill.Table,
			Columns: bill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bill.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bill.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldPrice,
		})
	}
	if value, ok := buo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldPrice,
		})
	}
	if value, ok := buo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldTime,
		})
	}
	if value, ok := buo.mutation.AddedTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldTime,
		})
	}
	if buo.mutation.RepairinvoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bill.RepairinvoiceTable,
			Columns: []string{bill.RepairinvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RepairinvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bill.RepairinvoiceTable,
			Columns: []string{bill.RepairinvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.EmployeeTable,
			Columns: []string{bill.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.EmployeeTable,
			Columns: []string{bill.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BillingstatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillingstatusTable,
			Columns: []string{bill.BillingstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billingstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BillingstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillingstatusTable,
			Columns: []string{bill.BillingstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billingstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Bill{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
