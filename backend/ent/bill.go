// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/prakitsrakaew/app/ent/bill"
	"github.com/prakitsrakaew/app/ent/billingstatus"
	"github.com/prakitsrakaew/app/ent/employee"
	"github.com/prakitsrakaew/app/ent/repairinvoice"
)

// Bill is the model entity for the Bill schema.
type Bill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// Time holds the value of the "time" field.
	Time int `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillQuery when eager-loading is set.
	Edges            BillEdges `json:"edges"`
	billingstatus_id *int
	employee_id      *int
	reparinvoice_id  *int
}

// BillEdges holds the relations/edges for other nodes in the graph.
type BillEdges struct {
	// Repairinvoice holds the value of the Repairinvoice edge.
	Repairinvoice *Repairinvoice
	// Employee holds the value of the Employee edge.
	Employee *Employee
	// Billingstatus holds the value of the Billingstatus edge.
	Billingstatus *Billingstatus
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RepairinvoiceOrErr returns the Repairinvoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) RepairinvoiceOrErr() (*Repairinvoice, error) {
	if e.loadedTypes[0] {
		if e.Repairinvoice == nil {
			// The edge Repairinvoice was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: repairinvoice.Label}
		}
		return e.Repairinvoice, nil
	}
	return nil, &NotLoadedError{edge: "Repairinvoice"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// The edge Employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "Employee"}
}

// BillingstatusOrErr returns the Billingstatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) BillingstatusOrErr() (*Billingstatus, error) {
	if e.loadedTypes[2] {
		if e.Billingstatus == nil {
			// The edge Billingstatus was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: billingstatus.Label}
		}
		return e.Billingstatus, nil
	}
	return nil, &NotLoadedError{edge: "Billingstatus"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bill) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // price
		&sql.NullInt64{}, // time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Bill) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // billingstatus_id
		&sql.NullInt64{}, // employee_id
		&sql.NullInt64{}, // reparinvoice_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bill fields.
func (b *Bill) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bill.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field price", values[0])
	} else if value.Valid {
		b.Price = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field time", values[1])
	} else if value.Valid {
		b.Time = int(value.Int64)
	}
	values = values[2:]
	if len(values) == len(bill.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field billingstatus_id", value)
		} else if value.Valid {
			b.billingstatus_id = new(int)
			*b.billingstatus_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_id", value)
		} else if value.Valid {
			b.employee_id = new(int)
			*b.employee_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field reparinvoice_id", value)
		} else if value.Valid {
			b.reparinvoice_id = new(int)
			*b.reparinvoice_id = int(value.Int64)
		}
	}
	return nil
}

// QueryRepairinvoice queries the Repairinvoice edge of the Bill.
func (b *Bill) QueryRepairinvoice() *RepairinvoiceQuery {
	return (&BillClient{config: b.config}).QueryRepairinvoice(b)
}

// QueryEmployee queries the Employee edge of the Bill.
func (b *Bill) QueryEmployee() *EmployeeQuery {
	return (&BillClient{config: b.config}).QueryEmployee(b)
}

// QueryBillingstatus queries the Billingstatus edge of the Bill.
func (b *Bill) QueryBillingstatus() *BillingstatusQuery {
	return (&BillClient{config: b.config}).QueryBillingstatus(b)
}

// Update returns a builder for updating this Bill.
// Note that, you need to call Bill.Unwrap() before calling this method, if this Bill
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bill) Update() *BillUpdateOne {
	return (&BillClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Bill) Unwrap() *Bill {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bill is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bill) String() string {
	var builder strings.Builder
	builder.WriteString("Bill(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", b.Price))
	builder.WriteString(", time=")
	builder.WriteString(fmt.Sprintf("%v", b.Time))
	builder.WriteByte(')')
	return builder.String()
}

// Bills is a parsable slice of Bill.
type Bills []*Bill

func (b Bills) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
