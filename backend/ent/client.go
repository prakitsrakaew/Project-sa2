// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/prakitsrakaew/app/ent/migrate"

	"github.com/prakitsrakaew/app/ent/bill"
	"github.com/prakitsrakaew/app/ent/billingstatus"
	"github.com/prakitsrakaew/app/ent/employee"
	"github.com/prakitsrakaew/app/ent/repairinvoice"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bill is the client for interacting with the Bill builders.
	Bill *BillClient
	// Billingstatus is the client for interacting with the Billingstatus builders.
	Billingstatus *BillingstatusClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Repairinvoice is the client for interacting with the Repairinvoice builders.
	Repairinvoice *RepairinvoiceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bill = NewBillClient(c.config)
	c.Billingstatus = NewBillingstatusClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Repairinvoice = NewRepairinvoiceClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Bill:          NewBillClient(cfg),
		Billingstatus: NewBillingstatusClient(cfg),
		Employee:      NewEmployeeClient(cfg),
		Repairinvoice: NewRepairinvoiceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		Bill:          NewBillClient(cfg),
		Billingstatus: NewBillingstatusClient(cfg),
		Employee:      NewEmployeeClient(cfg),
		Repairinvoice: NewRepairinvoiceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bill.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Bill.Use(hooks...)
	c.Billingstatus.Use(hooks...)
	c.Employee.Use(hooks...)
	c.Repairinvoice.Use(hooks...)
}

// BillClient is a client for the Bill schema.
type BillClient struct {
	config
}

// NewBillClient returns a client for the Bill from the given config.
func NewBillClient(c config) *BillClient {
	return &BillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bill.Hooks(f(g(h())))`.
func (c *BillClient) Use(hooks ...Hook) {
	c.hooks.Bill = append(c.hooks.Bill, hooks...)
}

// Create returns a create builder for Bill.
func (c *BillClient) Create() *BillCreate {
	mutation := newBillMutation(c.config, OpCreate)
	return &BillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Bill.
func (c *BillClient) Update() *BillUpdate {
	mutation := newBillMutation(c.config, OpUpdate)
	return &BillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillClient) UpdateOne(b *Bill) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBill(b))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillClient) UpdateOneID(id int) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBillID(id))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bill.
func (c *BillClient) Delete() *BillDelete {
	mutation := newBillMutation(c.config, OpDelete)
	return &BillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BillClient) DeleteOne(b *Bill) *BillDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BillClient) DeleteOneID(id int) *BillDeleteOne {
	builder := c.Delete().Where(bill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillDeleteOne{builder}
}

// Create returns a query builder for Bill.
func (c *BillClient) Query() *BillQuery {
	return &BillQuery{config: c.config}
}

// Get returns a Bill entity by its id.
func (c *BillClient) Get(ctx context.Context, id int) (*Bill, error) {
	return c.Query().Where(bill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillClient) GetX(ctx context.Context, id int) *Bill {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryRepairinvoice queries the Repairinvoice edge of a Bill.
func (c *BillClient) QueryRepairinvoice(b *Bill) *RepairinvoiceQuery {
	query := &RepairinvoiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(repairinvoice.Table, repairinvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, bill.RepairinvoiceTable, bill.RepairinvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the Employee edge of a Bill.
func (c *BillClient) QueryEmployee(b *Bill) *EmployeeQuery {
	query := &EmployeeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.EmployeeTable, bill.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingstatus queries the Billingstatus edge of a Bill.
func (c *BillClient) QueryBillingstatus(b *Bill) *BillingstatusQuery {
	query := &BillingstatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(billingstatus.Table, billingstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.BillingstatusTable, bill.BillingstatusColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillClient) Hooks() []Hook {
	return c.hooks.Bill
}

// BillingstatusClient is a client for the Billingstatus schema.
type BillingstatusClient struct {
	config
}

// NewBillingstatusClient returns a client for the Billingstatus from the given config.
func NewBillingstatusClient(c config) *BillingstatusClient {
	return &BillingstatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingstatus.Hooks(f(g(h())))`.
func (c *BillingstatusClient) Use(hooks ...Hook) {
	c.hooks.Billingstatus = append(c.hooks.Billingstatus, hooks...)
}

// Create returns a create builder for Billingstatus.
func (c *BillingstatusClient) Create() *BillingstatusCreate {
	mutation := newBillingstatusMutation(c.config, OpCreate)
	return &BillingstatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Billingstatus.
func (c *BillingstatusClient) Update() *BillingstatusUpdate {
	mutation := newBillingstatusMutation(c.config, OpUpdate)
	return &BillingstatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingstatusClient) UpdateOne(b *Billingstatus) *BillingstatusUpdateOne {
	mutation := newBillingstatusMutation(c.config, OpUpdateOne, withBillingstatus(b))
	return &BillingstatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingstatusClient) UpdateOneID(id int) *BillingstatusUpdateOne {
	mutation := newBillingstatusMutation(c.config, OpUpdateOne, withBillingstatusID(id))
	return &BillingstatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Billingstatus.
func (c *BillingstatusClient) Delete() *BillingstatusDelete {
	mutation := newBillingstatusMutation(c.config, OpDelete)
	return &BillingstatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BillingstatusClient) DeleteOne(b *Billingstatus) *BillingstatusDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BillingstatusClient) DeleteOneID(id int) *BillingstatusDeleteOne {
	builder := c.Delete().Where(billingstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingstatusDeleteOne{builder}
}

// Create returns a query builder for Billingstatus.
func (c *BillingstatusClient) Query() *BillingstatusQuery {
	return &BillingstatusQuery{config: c.config}
}

// Get returns a Billingstatus entity by its id.
func (c *BillingstatusClient) Get(ctx context.Context, id int) (*Billingstatus, error) {
	return c.Query().Where(billingstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingstatusClient) GetX(ctx context.Context, id int) *Billingstatus {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryBillingstatuss queries the billingstatuss edge of a Billingstatus.
func (c *BillingstatusClient) QueryBillingstatuss(b *Billingstatus) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billingstatus.Table, billingstatus.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billingstatus.BillingstatussTable, billingstatus.BillingstatussColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingstatusClient) Hooks() []Hook {
	return c.hooks.Billingstatus
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Create returns a create builder for Employee.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Create returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{config: c.config}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryEmployees queries the employees edge of a Employee.
func (c *EmployeeClient) QueryEmployees(e *Employee) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.EmployeesTable, employee.EmployeesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// RepairinvoiceClient is a client for the Repairinvoice schema.
type RepairinvoiceClient struct {
	config
}

// NewRepairinvoiceClient returns a client for the Repairinvoice from the given config.
func NewRepairinvoiceClient(c config) *RepairinvoiceClient {
	return &RepairinvoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repairinvoice.Hooks(f(g(h())))`.
func (c *RepairinvoiceClient) Use(hooks ...Hook) {
	c.hooks.Repairinvoice = append(c.hooks.Repairinvoice, hooks...)
}

// Create returns a create builder for Repairinvoice.
func (c *RepairinvoiceClient) Create() *RepairinvoiceCreate {
	mutation := newRepairinvoiceMutation(c.config, OpCreate)
	return &RepairinvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Repairinvoice.
func (c *RepairinvoiceClient) Update() *RepairinvoiceUpdate {
	mutation := newRepairinvoiceMutation(c.config, OpUpdate)
	return &RepairinvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepairinvoiceClient) UpdateOne(r *Repairinvoice) *RepairinvoiceUpdateOne {
	mutation := newRepairinvoiceMutation(c.config, OpUpdateOne, withRepairinvoice(r))
	return &RepairinvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepairinvoiceClient) UpdateOneID(id int) *RepairinvoiceUpdateOne {
	mutation := newRepairinvoiceMutation(c.config, OpUpdateOne, withRepairinvoiceID(id))
	return &RepairinvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Repairinvoice.
func (c *RepairinvoiceClient) Delete() *RepairinvoiceDelete {
	mutation := newRepairinvoiceMutation(c.config, OpDelete)
	return &RepairinvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RepairinvoiceClient) DeleteOne(r *Repairinvoice) *RepairinvoiceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RepairinvoiceClient) DeleteOneID(id int) *RepairinvoiceDeleteOne {
	builder := c.Delete().Where(repairinvoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepairinvoiceDeleteOne{builder}
}

// Create returns a query builder for Repairinvoice.
func (c *RepairinvoiceClient) Query() *RepairinvoiceQuery {
	return &RepairinvoiceQuery{config: c.config}
}

// Get returns a Repairinvoice entity by its id.
func (c *RepairinvoiceClient) Get(ctx context.Context, id int) (*Repairinvoice, error) {
	return c.Query().Where(repairinvoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepairinvoiceClient) GetX(ctx context.Context, id int) *Repairinvoice {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRepairinvoices queries the repairinvoices edge of a Repairinvoice.
func (c *RepairinvoiceClient) QueryRepairinvoices(r *Repairinvoice) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repairinvoice.Table, repairinvoice.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, repairinvoice.RepairinvoicesTable, repairinvoice.RepairinvoicesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepairinvoiceClient) Hooks() []Hook {
	return c.hooks.Repairinvoice
}
